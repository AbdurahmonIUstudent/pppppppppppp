from config import open_weather_token
import requests
from datetime import datetime
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import threading
import time

bot = telebot.TeleBot('6082532817:AAGcjV5Uuf2Ar1bth3HOqUuu1xYxFYIFqrg')

# Global list to store active reminders
active_reminders = []

#It will recognize command /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'Hi! This is a reminder bot. Use /set_reminder to set a reminder or use /weather to see the weather or /active_messages to see your active reminders.')

#It will send reminder
def send_reminder(chat_id, message_text):
    bot.send_message(chat_id, f"Reminder: {message_text}")

#This function recognizes /set_reminder command
@bot.message_handler(commands=['set_reminder'])
def set_reminder(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "Please enter your reminder message and the time, example of writing:\nHello 2023-07-11 11:18:00")
    bot.register_next_step_handler(message, process_reminder)

# function process_reminder process message that was written during setting a reminder.
def process_reminder(message):
    words = message.text.split()
    message_part = ' '.join(words[0: len(words)-2])
    time_part = words[-2] + " " + words[-1]
    if len(time_part) == 0 or len(message_part) == 0 or len(words[0]) == 0:
        bot.send_message(message.chat.id, "Please provide the message and time for the reminder in the format: /set_reminder <message> <time>")
        return

    message_text = message_part
    time_str = time_part

    try:
        time_obj = datetime.strptime(time_str, "%Y-%m-%d %H:%M:%S")

        current_time = datetime.now()
        time_diff = (time_obj - current_time).total_seconds()

        if time_diff < 0:
            bot.send_message(message.chat.id, "The specified time has already passed.")
            return

        bot.send_message(message.chat.id, f'Don\'t worry, I will notify you at {time_obj.strftime("%H:%M:%S")}')

        reminder = {
            'chat_id': message.chat.id,
            'message_text': message_text,
            'time_obj': time_obj
        }
        active_reminders.append(reminder)

        threading.Timer(time_diff, send_reminder, args=[message.chat.id, message_text]).start()

    except ValueError:
        bot.send_message(message.chat.id, "Invalid time format. Please provide the time in the format: YYYY-MM-DD HH:MM:SS")

# We need it to recognize /active_messages command.
@bot.message_handler(commands=['active_messages'])
def show_active_messages(message):
    chat_id = message.chat.id

    if len(active_reminders) > 0:
        active_messages = []
        current_time = datetime.now()
        for reminder in active_reminders:
            if reminder['time_obj'] > current_time:
                active_messages.append(f"Message: {reminder['message_text']}, Time: {reminder['time_obj'].strftime('%Y-%m-%d %H:%M:%S')}")
        if len(active_messages) > 0:
            active_messages_text = '\n'.join(active_messages)
            bot.send_message(chat_id, "Active Messages:")
            bot.send_message(chat_id, active_messages_text, parse_mode='Markdown', reply_markup=create_close_button())
        else:
            bot.send_message(chat_id, "No active messages.")
    else:
        bot.send_message(chat_id, "No active messages.")

# This function closes button when we click to "Close".
def create_close_button():
    keyboard = InlineKeyboardMarkup()
    close_button = InlineKeyboardButton("Close", callback_data='close_active_messages')
    keyboard.add(close_button)
    return keyboard

@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    if call.data == 'close_active_messages':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        # Delete non-active reminders from the active_reminders list
        current_time = datetime.now()
        active_reminders[:] = [reminder for reminder in active_reminders if reminder['time_obj'] > current_time]

# We need it to recognize /weather command.
@bot.message_handler(commands=['weather'])
def start(message):
    bot.send_message(message.chat.id, "Please enter the city name:")
    bot.register_next_step_handler(message, get_city)

#function get_city takes name of the city and sends useful information about the weather.
def get_city(message):
    city_name = message.text

    try:
        r = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={open_weather_token}&units=metric")
        data = r.json()
        if data["cod"] == "404":
            bot.send_message(message.chat.id, "Invalid city name. Please enter a valid city.")
            return

        temperature = data["main"]['temp']
        humidity = data["main"]['humidity']
        pressure = data["main"]['pressure']
        wind = data["wind"]['speed']
        tp = data["weather"][0]['description']
        sunrise_timestamp = datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.fromtimestamp(data['sys']['sunset'])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        bot.send_message(message.chat.id, f"Temperature: {temperature}Â°C\nType of weather: {tp}\nPressure: {pressure} hPa\nLength of the day: {length_of_the_day}\nHave a nice day!")
    except:
        bot.send_message(message.chat.id, "An error occurred while fetching the weather information.")

bot.polling(none_stop=True)
